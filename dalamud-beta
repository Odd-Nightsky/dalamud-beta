#!/bin/env python3
import json
import argparse
import errno
import os
import sys

# for later reference
# DalamudBetaKey
# DalamudBetaKind

def load_config(file):
    try:
        c = json.load(open(file))
    except FileNotFoundError:
        print('No such file or directory')
        exit(errno.ENOENT)
    except Exception as e:
        print('error occured. weâ€™ll figure it out later')
        raise e
    return c


if __name__ == '__main__':
    # setup parser
    parser = argparse.ArgumentParser(
        prog='dalamud-beta',
        description='enable/disable dalamud betas'
    )
    parser.add_argument('op', help='operation to perform.', choices=['list', 'enable', 'disable', 'l', 'e', 'd'])
    parser.add_argument('-s', '--stream', help='the dev stream to enable, defaults to \'stg\'', default='stg')
    parser.add_argument('-k', '--key', help='the beta key to opt into')
    parser.add_argument('-f', '--file', help='the dalamud config file to edit. by default will try to guess the file based on OS')

    # actually run the parser (this should auto handle --help)
    args = parser.parse_args()

    if args.op == 'list' or args.op == 'l':
        from urllib.request import urlopen
        betas = urlopen('https://raw.githubusercontent.com/goatcorp/dalamud-declarative/main/config.yaml').read()
        # I'd prefer listing it out fancy like but python doesn't come with a yaml parser and I don't feel like shipping one
        betas = betas.decode()
        print(betas)
        exit()

    if args.file:
        dalamud_config_file = args.file
    else:
        dalamud_config_file = None
        # this is where we guess the file to work with based on OS
        # this code will fail for all kinds of reasons but users can just make github issues lol
        match sys.platform:
            case 'linux':
                dalamud_config_file = f'{os.environ["HOME"]}/.xlcore/dalamudConfig.json'
            case 'darwin':  # macOS
                print('We do not yet know the default location of the dalamud config for this platform.')
                print('Please open a github issue or otherwise reach out to me.')
                print('Alternatively use --file to specify the file location yourself.')
            case 'win32':  # windows
                print('We do not yet know the default location of the dalamud config for this platform.')
                print('Please open a github issue or otherwise reach out to me.')
                print('Alternatively use --file to specify the file location yourself.')
            case 'cygwin':  # windows but worse
                print('Why are you running this through Cygwin? just use normal python smh.')
            case _:
                print(f'I didn\'t know you could run XIV on {sys.platform}. Impressive!')
                print('You\'re on your own. use --file to specify the location of your dalamud config.')
        if not dalamud_config_file:
            print('No dalamud config specified. exiting')
            exit(errno.EPERM)

    if args.op == 'enable' or args.op == 'e':
        config = load_config(dalamud_config_file)
        error = False
        if not args.stream:
            print('stream can not be empty')
            error = True
        if not args.key:
            print('key can not be empty')
            error = True
        if error:
            exit(errno.EPERM)

        config['DalamudBetaKey'] = args.key
        config['DalamudBetaKind'] = args.stream
        json.dump(config, open(dalamud_config_file, 'w'), indent=2)
        print(f'Successfully opted into {args.stream}.')

    if args.op == 'disable' or args.op == 'd':
        config = load_config(dalamud_config_file)
        config['DalamudBetaKey'] = None
        config['DalamudBetaKind'] = None
        json.dump(config, open(dalamud_config_file, 'w'), indent=2)
        print('Successfully opted out of betas.')

